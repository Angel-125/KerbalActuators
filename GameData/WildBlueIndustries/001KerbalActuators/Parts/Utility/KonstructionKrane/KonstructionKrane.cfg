PART
{
	// --- general parameters ---
	name = wbiKonstructionKrane
	module = Part
	author = Pak/Michael Billard (Angel-125)

	// --- asset parameters ---
	rescaleFactor = 1
	MODEL
	{
		model = WildBlueIndustries/001KerbalActuators/Parts/Utility/KonstructionKrane/KonstructionKrane
	}

	// --- node definitions ---
	// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
	node_stack_bottom = 0.0, -0, 0.0, 0.0, -1.0, 0.0, 1
	node_attach = 0.0, -0, 0.0, 0.0, -1.0, 0.0, 1

	NODE
	{
		name = jibNode
		transform = nodeJib
	}

	// --- editor parameters ---
	TechRequired = actuators
	entryCost = 62500
	cost = 25000
	category = Utility
	subcategory = 0
	title = Konstruction Krane
	manufacturer = #autoLOC_501646 //#autoLOC_501646 = Dinkelstein Kerman's Construction Emporium
	description = This krane works well as a capsule retrieveal device or for picking up wayward kerbals.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,1,1,1,1

	// --- standard part parameters ---
	mass = 1.7
	dragModelType = default
	maximum_drag = 0.25
	minimum_drag = 0.25
	angularDrag = .5
	crashTolerance = 45
	breakingForce = 5500
	breakingTorque = 5500
	maxTemp = 900
	fuelCrossFeed = True
	heatConductivity = 0.001

	MODULE
	{
		name = WBIMovableJoint
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController
		
		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Jib

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = JibMount

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController
		
		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Pitch Mast

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = Mast

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 1,0,0

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15
	}

	MODULE
	{
		//This module handles mesh rotation operations such as an engine nacelle pivot.
		name = WBIRotationController
		
		//(Optional, defaults to Actuator) User-friendly name of the rotation controller.
		servoName = Swivel Krane

		//(Optional, defaults to Engine) Group ID for the actuator. Allows you to differentiate
		//between the VTOL manager (which uses the Engine group), and, say, a robot arm manager.
		groupID = Arm

		//Name of the pivot z+ points down the length of the arm. See Unity model.
		rotationMeshName = SwivelMount

		//Rotation axis of the pivot (x, y, z)
		rotationMeshAxis = 0,0,1

		//We'll use the Servo Manager to control the rotation
		//(defaults to true, so we have the buttons in the right-click menu)
		guiVisible = false

		//We don't do symmetry with this part. This is used for engines for the most part.
		canMirrorRotation = false

		//How fast to rotate the pivot
		rotationDegPerSec = 15
	}

	//Put this module LAST in the list of rotation controllers and such.
	//It provides a button to display a GUI.
	MODULE
	{
		name = WBIServoManager

		//Effect to play when a servo is running
		runningEffectName = runningServo
	}

	EFFECTS
	{
		runningServo
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/001KerbalActuators/Sounds/ServoLoop
				volume = 0.0 0.0
				volume = 1.0 10.0
				pitch = 1.0 1.0
				loop = true
			}
		}
	}
}
